
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// БондаренкоДМ ++
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект.Ссылка, "Дата, ВремяНачалаРабот,
	|ВремяОкончанияРабот, ДатаПроведенияРабот, Специалист");
	
	ДокументИзменен = ТекущийОбъект.ЭтоНовый()
		ИЛИ ДанныеДокумента.Дата <> ТекущийОбъект.Дата
		ИЛИ ДанныеДокумента.ВремяНачалаРабот <> ТекущийОбъект.ВремяНачалаРабот
		ИЛИ ДанныеДокумента.ВремяОкончанияРабот <> ТекущийОбъект.ВремяОкончанияРабот
		ИЛИ ДанныеДокумента.ДатаПроведенияРабот <> ТекущийОбъект.ДатаПроведенияРабот
		ИЛИ ДанныеДокумента.Специалист <> ТекущийОбъект.Специалист;
	
    Текст = "";
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		Текст = СтрШаблон("Создан новый документ %1.Дата проведения работ %2, специалист %3.", ТекущийОбъект.Ссылка,
		ТекущийОбъект.ДатаПроведенияРабот, ТекущийОбъект.Специалист);
	КонецЕсли;
	
	Если ДанныеДокумента.Дата <> ТекущийОбъект.Дата Тогда
		Текст = Текст + ?(Текст = "", "", ("," + Символы.ПС)) +
	    СтрШаблон("В документе %1 изменилась дата документа на %2", ТекущийОбъект.Ссылка, Формат(ТекущийОбъект.Дата, "ДЛФ=D; ДП='Нет даты'"));
	КонецЕсли;
	
	Если ДанныеДокумента.ВремяНачалаРабот <> ТекущийОбъект.ВремяНачалаРабот Тогда
		Текст = Текст + ?(Текст = "", "", ("," + Символы.ПС)) +
	    СтрШаблон("В документе %1 изменилось время начала работ на %2", ТекущийОбъект.Ссылка, Формат(ТекущийОбъект.ВремяНачалаРабот, "ДЛФ=T; ДП=-;"));
	КонецЕсли;
	
	Если ДанныеДокумента.ВремяОкончанияРабот <> ТекущийОбъект.ВремяОкончанияРабот Тогда
		Текст = Текст + ?(Текст = "", "", ("," + Символы.ПС)) +
		СтрШаблон("В документе %1 изменилось время окончания работ на %2", ТекущийОбъект.Ссылка, Формат(ТекущийОбъект.ВремяОкончанияРабот, "ДЛФ=T; ДП=-;"));
	КонецЕсли;
	
	Если ДанныеДокумента.ДатаПроведенияРабот <> ТекущийОбъект.ДатаПроведенияРабот Тогда
		Текст = Текст + ?(Текст = "", "", ("," + Символы.ПС)) +
		СтрШаблон("В документе %1 изменилась дата проведения работ на %2", ТекущийОбъект.Ссылка, Формат(ТекущийОбъект.ДатаПроведенияРабот, "ДЛФ=D; ДП='Нет даты';"));
	КонецЕсли;
	
	Если ДанныеДокумента.Специалист <> ТекущийОбъект.Специалист Тогда
		Текст = Текст + ?(Текст = "", "", ("," + Символы.ПС)) +
		СтрШаблон("В документе %1 изменился специалист на %2", ТекущийОбъект.Ссылка, ТекущийОбъект.Специалист);
	КонецЕсли;
		
	Если ДокументИзменен Тогда
		НовоеУведомление = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		НовоеУведомление.ТекстСообщения = Текст;
		НовоеУведомление.Записать();
	КонецЕсли;
	// БондаренкоДМ --

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ОписаниеПроблемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// БондаренкоДМ ++
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Объект.ОписаниеПроблемы, ЭтотОбъект,
		"Объект.ОписаниеПроблемы", "Описание проблемы");
	// БондаренкоДМ --
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// БондаренкоДМ ++
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Объект.Комментарий, ЭтотОбъект, "Объект.Комментарий");
	// БондаренкоДМ --
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
#КонецОбласти
